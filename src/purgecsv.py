import csv
import typer
import os

from models import File
from services.dedup import move_duplicates
from rich.console import Console
from typing_extensions import Annotated


def purgecsv(
    csv_path: Annotated[
        str, typer.Argument(help="The csv file generated by thepurge.py")
    ] = None,
    destination_dir: Annotated[
        str,
        typer.Argument(help="Destination directory used to move deplicated files"),
    ] = None,
):
    console = Console()
    if csv_path is None or not os.path.exists(csv_path) or not os.path.isfile(csv_path):
        console.print(f"[red]CSV is not a file or was not found: {csv_path}[/red]")
        raise typer.Exit(code=1)

    if (
        destination_dir is None
        or not os.path.exists(destination_dir)
        or not os.path.isdir(destination_dir)
    ):
        console.print(
            "[red]Destination directory must be provided and must exist.[/red]"
        )
        raise typer.Exit(code=2)

    with open(csv_path, "r") as _f:
        files = {}
        first = True
        for line in csv.reader(_f, delimiter=",", quotechar='"'):
            if first:
                first = False
                continue
            checksum = line[0]
            file_path = line[1]
            size = line[2]
            file_type = file_path.split(".")[-1] if "." in file_path else "unknown"
            if checksum not in files:
                files[checksum] = []
            f = File(file_path=file_path, size=int(size), file_type=file_type)
            files[checksum].append(f)
            f.print(console=console)
        move_func = move_duplicates(destination_dir)
        move_func(files)


if __name__ == "__main__":
    typer.run(purgecsv)
